/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/cppFiles/class.cc to edit this template
 */

/* 
 * File:   CppForG.cpp
 * Author: rlcancian
 * 
 * Created on 11 de janeiro de 2022, 22:37
 */

#include <fstream>



#include "CppForG.h"
#include "../../kernel/simulator/Model.h"

#ifdef PLUGINCONNECT_DYNAMIC

extern "C" StaticGetPluginInformation GetPluginInformation() {
	return &CppForG::GetPluginInformation;
}
#endif

ModelDataDefinition* CppForG::NewInstance(Model* model, std::string name) {
	return new CppForG(model, name);
}

CppForG::CppForG(Model* model, std::string name) : ModelComponent(model, Util::TypeOf<CppForG>(), name) {
	_createInternalAndAttachedData();
}

std::string CppForG::show() {
	return ModelComponent::show() + "";
}

ModelComponent* CppForG::LoadInstance(Model* model, PersistenceRecord *fields) {
	CppForG* newComponent = new CppForG(model);
	try {
		newComponent->_loadInstance(fields);
	} catch (const std::exception& e) {

	}
	return newComponent;
}

void CppForG::setCppCompiler(CppCompiler* _cppCompiler) {
	this->_cppCompiler = _cppCompiler;
}

CppCompiler* CppForG::getCppCompiler() const {
	return _cppCompiler;
}

void CppForG::setInitBetweenReplicationCode(std::string _initBetweenReplicationCode) {
	this->_initBetweenReplicationCode = _initBetweenReplicationCode;
}

std::string CppForG::getInitBetweenReplicationCode() const {
	return _initBetweenReplicationCode;
}

void CppForG::setOnDispatchEventCode(std::string _onDispatchEventCode) {
	this->_onDispatchEventCode = _onDispatchEventCode;
}

std::string CppForG::getOnDispatchEventCode() const {
	return _onDispatchEventCode;
}

void CppForG::setIncludesCode(std::string _includesCode) {
	this->_includesCode = _includesCode;
}

std::string CppForG::getIncludesCode() const {
	return _includesCode;
}

void CppForG::_onDispatchEvent(Entity* entity, unsigned int inputPortNumber) {
	_parentModel->getTracer()->trace("I'm just a dummy model and I'll just send the entity forward");
	this->_parentModel->sendEntityToComponent(entity, this->getConnections()->getFrontConnection());
}

bool CppForG::_loadInstance(PersistenceRecord *fields) {
	bool res = ModelComponent::_loadInstance(fields);
	if (res) {
		// @TODO: not implemented yet
	}
	return res;
}

//void CppForG::_initBetweenReplications() {}

void CppForG::_saveInstance(PersistenceRecord *fields, bool saveDefaultValues) {
	ModelComponent::_saveInstance(fields, saveDefaultValues);
	// @TODO: not implemented yet
}

bool CppForG::_check(std::string* errorMessage) {
	bool resultAll = true;
	CppCompiler::CompilationResult result;
	std::string name = this->getName();
	std::string sourceCode = "\
//\
// File automatically generated by GenESyS CppForG plugin\
//\
#include <iostream>\n\
#include <string>\n\
#include \"../../source/kernel/simulator/Model.h\"\n\
// user includes\n\
" + this->_includesCode + "\n\
\n\
void _onDispatchEvent_" + name + "(Model* model) {\n\
	// user code\n\
" + this->_onDispatchEventCode + "\n\
}\n\
\n\
void _initBetweenReplications_" + name + "(Model* model) {\n\
	// user code\n\
" + this->_initBetweenReplicationCode + "\n\
}\n\
\n\
extern \"C\" void onDispatchEvent_" + name + "(Model* model) {\n\
	try {\n\
		_onDispatchEvent_" + name + "(model);\n\
	} catch (const std::exception& e) {\n\
		model->getTracer()->traceError(e, \"Error while executing onDispatchEvent cpp user code in " + name + ".\");\n\
	}\n\
}\n\
\n\
extern \"C\" void initBetweenReplications_" + name + "(Model* model) {\n\
	try {\n\
		_initBetweenReplications_" + name + "(model);\n\
	} catch (const std::exception& e) {\n\
		model->getTracer()->traceError(e, \"Error while executing initBetweenReplications cpp user code in " + name + ".\");\n\
	}\n\
}\n";
	// save the code for the compiler
	std::string sourceFilename = /*_cppCompiler->getTempDir() + dirSeparator() +*/ _cppCompiler->getSourceFilename();

	try {
		std::ofstream outfile(sourceFilename);
		outfile << sourceCode;
		outfile.close();
	} catch (...) {
		resultAll = false;
		*errorMessage += "Error saving source code to compile";
	}
	// if saved, compile
	if (resultAll) {
		CppCompiler::CompilationResult result = _cppCompiler->compileToDynamicLibrary(sourceFilename);
	}
	return resultAll;
}

void CppForG::_initBetweenReplications() {
	//@ TODO
}

void CppForG::_createInternalAndAttachedData() {
	if (_parentModel->isAutomaticallyCreatesModelDataDefinitions()) {
		if (_cppCompiler == nullptr) {
			_cppCompiler = new CppCompiler(_parentModel, getName() + ".CppCompiler");
			_cppCompiler->setSourceFilename(getName() + ".cpp");
			_cppCompiler->setOutputFilename(getName() + ".so");
			_internalDataInsert("CppCompiler", _cppCompiler);
		}
	}
}

PluginInformation* CppForG::GetPluginInformation() {
	PluginInformation* info = new PluginInformation(Util::TypeOf<CppForG>(), &CppForG::LoadInstance, &CppForG::NewInstance);
	info->setCategory("Logic");
	info->insertDynamicLibFileDependence("cppcompiler.so");
	info->setDescriptionHelp("//@TODO");
	return info;
}